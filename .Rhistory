plot(cars)
knitr::opts_chunk$set(echo = TRUE)
pmd <- read.csv("../../data/pmd-en.csv")
pmd <- read.csv("../../data/pmd-en.csv")
head(pmd, 3)
# no. of rows and columns
dim(pmd)
# dataset summary
str(pmd)
# percentage of missing values in each column in dataset
p <- function(x) {sum(is.na(x))/length(x)*100}
sort(apply(pmd, 2, p), decreasing = TRUE) # marmin = 2 means function will be applied in each column
p <- function(x) {sum(x == ".." | x == "F")/length(x)*100}
sort(apply(pmd, 2, p), decreasing = TRUE)
library(dplyr)
# Remove rows with ".." or "F" values in proximity columns
pmd_filtered <- pmd %>%
filter_at(vars(starts_with("prox_idx")), all_vars(. != ".." & . != "F"))
p <- function(x) {sum(x == ".." | x == "F")/length(x)*100}
sort(apply(pmd, 2, p), decreasing = TRUE)
p <- function(x) {sum(x == ".." | x == "F")/length(x)*100}
sort(apply(pmd_filtered, 2, p), decreasing = TRUE)
# no. of rows and columns in filtered dataset
dim(pmd_filtered)
set.seed(123)
km.res <- kmeans(pmd_filtered, 4, nstart = 25)
library(dplyr)
# Remove specified columns from dataset
df_filtered <- select(pmd_filtered, -DBUID, -DBPOP, -DAUID, -DAPOP, -CSDUID, -CSDNAME,
-CSDTYPE, -CSDPOP, -CMANAME, -CMATYPE, -CMAPOP, -PRUID, -PRNAME, -PRPOP)
set.seed(123)
km.res <- kmeans(df_filtered, 4, nstart = 25)
any(is.na(df_filtered))
# percentage of missing values in each column in training dataset
p <- function(x) {sum(is.na(x))/length(x)*100}
sort(apply(df_filtered, 2, p))
library(dplyr)
# Remove specified columns from dataset
df_filtered <- select(pmd_filtered, -DBUID, -DBPOP, -DAUID, -DAPOP, -CSDUID, -CSDNAME, -CMAPUID,
-CSDTYPE, -CSDPOP, -CMANAME, -CMATYPE, -CMAPOP, -PRUID, -PRNAME, -PRPOP, -CMAUID)
any(is.na(df_filtered))
# percentage of missing values in each column in training dataset
p <- function(x) {sum(is.na(x))/length(x)*100}
sort(apply(df_filtered, 2, p))
set.seed(123)
km.res <- kmeans(df_filtered, 4, nstart = 25)
# Print the results
print(km.res)
dd <- cbind(df_filtered, cluster = km.res$cluster)
head(dd)
install.packages("factoextra")
library(factoextra)
# Visualize the clusters
fviz_cluster(km.res, data = df_filtered, geom = "point", ellipse.type = "convex")
str(df_filtered)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(factoextra)
# Convert columns that start with "prox_idx" to numeric
pmd <- pmd %>%
mutate_if(starts_with("prox_idx"), as.numeric)
# Convert columns that start with "prox_idx" to numeric
pmd <- pmd %>%
mutate_at(vars(starts_with("prox_idx")), as.numeric)
vars(df_filtered)
colSums(df_filtered)
cols(df_filtered)
columns(df_filtered)
names(df_filtered)
# Convert columns that start with "prox_idx" to numeric
pmd <- pmd %>%
mutate_at(names(starts_with("prox_idx")), as.numeric)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(factoextra)
pmd <- read.csv("../../data/pmd-en.csv")
head(pmd, 3)
# Remove rows with ".." or "F" values in proximity columns
pmd_filtered <- pmd %>%
filter_at(vars(starts_with("prox_idx")), all_vars(. != ".." & . != "F"))
# no. of rows and columns in filtered dataset
dim(pmd_filtered)
# Remove specified columns from dataset
df_filtered <- select(pmd_filtered, -DBUID, -DBPOP, -DAUID, -DAPOP, -CSDUID, -CSDNAME, -CMAPUID,
-CSDTYPE, -CSDPOP, -CMANAME, -CMATYPE, -CMAPOP, -PRUID, -PRNAME, -PRPOP, -CMAUID)
set.seed(123)
km.res <- kmeans(df_filtered, 4, nstart = 25)
# Print the results
print(km.res)
dd <- cbind(df_filtered, cluster = km.res$cluster)
head(dd)
head(dd["lon", "lat", "cluster"])
dd["lon", "lat", "cluster"]
dd[, c("lon", "lat", "cluster")]
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(factoextra)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(factoextra)
pmd <- read.csv("../../data/pmd-en.csv")
head(pmd, 3)
# Convert selected columns to numeric
pmd <- pmd %>%
mutate(prox_idx_emp = as.numeric(prox_idx_emp),
prox_idx_pharma = as.numeric(prox_idx_pharma),
prox_idx_childcare = as.numeric(prox_idx_childcare),
prox_idx_health = as.numeric(prox_idx_health),
prox_idx_grocery = as.numeric(prox_idx_grocery),
prox_idx_educpri = as.numeric(prox_idx_educpri),
prox_idx_educsec = as.numeric(prox_idx_educsec),
prox_idx_lib = as.numeric(prox_idx_lib),
prox_idx_parks = as.numeric(prox_idx_parks),
prox_idx_transit = as.numeric(prox_idx_transit))
# percentage of missing values in each column in dataset
p <- function(x) {sum(is.na(x))/length(x)*100}
sort(apply(pmd, 2, p), decreasing = TRUE) # marmin = 2 means function will be applied in each column
# Remove rows with ".." or "F" values in proximity columns
pmd_filtered <- pmd %>%
filter_at(vars(starts_with("prox_idx")), all_vars(. != ".." & . != "F"))
# no. of rows and columns in filtered dataset
dim(pmd_filtered)
p <- function(x) {sum(x == ".." | x == "F")/length(x)*100}
sort(apply(pmd_filtered, 2, p), decreasing = TRUE)
# Convert selected columns to numeric
pmd_filtered <- pmd_filtered %>%
mutate(prox_idx_emp = as.numeric(prox_idx_emp),
prox_idx_pharma = as.numeric(prox_idx_pharma),
prox_idx_childcare = as.numeric(prox_idx_childcare),
prox_idx_health = as.numeric(prox_idx_health),
prox_idx_grocery = as.numeric(prox_idx_grocery),
prox_idx_educpri = as.numeric(prox_idx_educpri),
prox_idx_educsec = as.numeric(prox_idx_educsec),
prox_idx_lib = as.numeric(prox_idx_lib),
prox_idx_parks = as.numeric(prox_idx_parks),
prox_idx_transit = as.numeric(prox_idx_transit))
# Remove specified columns from dataset
df_filtered <- select(pmd_filtered, -DBUID, -DBPOP, -DAUID, -DAPOP, -CSDUID, -CSDNAME, -CMAPUID,
-CSDTYPE, -CSDPOP, -CMANAME, -CMATYPE, -CMAPOP, -PRUID, -PRNAME, -PRPOP, -CMAUID, -in_db_emp, -in_db_pharma, -in_db_childcare, -in_db_health, -in_db_grocery, -in_db_educpri, -in_db_educsec, -in_db_lib, -in_db_parks, -in_db_transit, -transit_na, -amenity_dense, -suppressed)
any(is.na(df_filtered))
head(df_filtered)
set.seed(123)
km.res <- kmeans(df_filtered, 4, nstart = 25)
# Print the results
print(km.res)
dd <- cbind(df_filtered, cluster = km.res$cluster)
dd[, c("lon", "lat", "cluster")]
df_filtered <- select(df_filtered, -lon, -lat)
set.seed(123)
km.res <- kmeans(df_filtered, 4, nstart = 25)
# Print the results
print(km.res)
dd <- cbind(df_filtered, cluster = km.res$cluster)
dd[, c("lon", "lat", "cluster")]
dd[, c("cluster")]
